/*
** Copyright (c) 2020, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/
console.info('Loaded {{ artefact_name }} View Javascript');

/*
** Define {{ artefact_name }} View Class
*/
{% if container_artefact is not defined %}
class {{ model_class_name }}View extends OkitArtefactView {
{% else %}
class {{ model_class_name }}View extends OkitContainerArtefactView {
{% endif %}
    constructor(artefact=null, json_view) {
        super(artefact, json_view);
    }
    // TODO: Return Artefact Parent id e.g. vcn_id for a Internet Gateway
    get parent_id() {return this.artefact.vcn_id;}
    // TODO: Return Artefact Parent Object e.g. VirtualCloudNetwork for a Internet Gateway
    get parent() {return this.getJsonView().getVirtualCloudNetwork(this.parent_id);}
    /*
    ** SVG Processing
    */
    /*
    ** Property Sheet Load function
    */
    loadProperties() {
        const self = this;
        $(jqId(PROPERTIES_PANEL)).load("propertysheets/{{ html_name }}.html", () => {loadPropertiesSheet(self.artefact);});
    }
    /*
    ** Load and display Value Proposition
    */
    loadValueProposition() {
        $(jqId(VALUE_PROPOSITION_PANEL)).load("valueproposition/{{ html_name }}.html");
    }
    /*
    ** Static Functionality
    */
    static getArtifactReference() {
        return {{ model_class_name }}.getArtifactReference();
    }
    static getDropTargets() {
        // TODO: Return List of Artefact Drop Targets Parent Object Reference Names e.g. VirtualCloudNetwork for a Internet Gateway
        return [VirtualCloudNetwork.getArtifactReference()];
    }
}
/*
** Dynamically Add View Functions
*/
OkitJsonView.prototype.drop{{ model_class_name }}View = function(target) {
    let view_artefact = this.new{{ model_class_name }}();
    if (target.type === Compartment.getArtifactReference()) {
        view_artefact.artefact.compartment_id = target.id;
    } else {
        view_artefact.artefact.compartment_id = target.compartment_id;
    }
    view_artefact.recalculate_dimensions = true;
    return view_artefact;
}
OkitJsonView.prototype.new{{ model_class_name }} = function(obj) {
    this.get{{ model_class_name }}s().push(obj ? new {{ model_class_name }}View(obj, this) : new {{ model_class_name }}View(this.okitjson.new{{ model_class_name }}(), this));
    return this.get{{ model_class_name }}s()[this.get{{ model_class_name }}s().length - 1];
}
OkitJsonView.prototype.get{{ model_class_name }}s = function() {
    if (!this.{{ artefact_json_list }}) {
        this.{{ artefact_json_list }} = [];
    }
    return this.{{ artefact_json_list }};
}
OkitJsonView.prototype.get{{ model_class_name }} = function(id='') {
    for (let artefact of this.get{{ model_class_name }}s()) {
        if (artefact.id === id) {
            return artefact;
        }
    }
    return undefined;
}
OkitJsonView.prototype.delete{{ model_class_name }} = function(id='') {
    this.okitjson.delete{{ model_class_name }}(id);
    this.update();
}
OkitJsonView.prototype.load{{ model_class_name }}s = function({{ artefact_json_list }}) {
    for (const artefact of {{ artefact_json_list }}) {
        this.get{{ model_class_name }}s().push(new {{ model_class_name }}View(new {{ model_class_name }}(artefact, this.okitjson), this));
    }
}
OkitJsonView.prototype.clone{{ model_class_name }} = function(obj) {
    const clone = obj.artefact.clone();
    clone.display_name += 'Clone';
    clone.id = clone.okit_id;
    this.okitjson.{{ artefact_json_list }}.push(clone);
    this.update(this.okitjson);
}
